<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.35">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.9"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.9">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.74">
    <script>pipeline {
    agent { node &apos;aws-ec2-dev&apos; }
    environment {
        access_key = credentials(&apos;env-aws-access-key&apos;)
        secret_key = credentials(&apos;env-aws-secret-key&apos;)
        registry_url = &quot;803808824931.dkr.ecr.us-east-1.amazonaws.com&quot;
        sonarscan = &quot;cicd-sonar:latest&quot;

    }

   stages {
    stage(&apos;[i] cred]&apos;) {
         steps {
                 sh &apos;&apos;&apos;
                 mkdir -p ~/.aws
                 echo &quot;[default]&quot; &gt;&gt; ~/.aws/config
                 echo &quot;output = json&quot; &gt;&gt; ~/.aws/config
                 echo &quot;region = us-east-1&quot; &gt;&gt; ~/.aws/config
                 echo &quot;[default]&quot; &gt;&gt; ~/.aws/credentials
                 echo &quot;aws_access_key_id = $access_key&quot; &gt;&gt; ~/.aws/credentials
                 echo &quot;aws_secret_access_key = $secret_key&quot; &gt;&gt; ~/.aws/credentials
                 &apos;&apos;&apos;
             }
     }
stage (&apos;[i] GIT&apos;) {
    steps {
        dir (&quot;ci-cd-app&quot;) {
            git branch: &apos;master&apos;, credentialsId: &apos;github&apos;, url: &apos;https://github.com/publius-github/ci-cd-app.git&apos;
        }
        dir (&quot;ci-cd-infra&quot;) {
            git branch: &apos;feature/container&apos;, credentialsId: &apos;github&apos;, url: &apos;https://github.com/publius-github/ci-cd.git&apos;
        }
    }
}


stage(&apos;build&apos;) {
                        steps {
                                sh &apos;cd ${WORKSPACE}/ci-cd-infra/docker/ &amp;&amp; docker build -t $registry_url/$sonarscan -f ${WORKSPACE}/ci-cd-infra/docker/sonar-runner.dockerfile .&apos;
                        }
                }
stage(&apos;[i] Docker push [simple-testing-capabilities-spa]&apos;) {
    steps {
        script {
            docker.withRegistry(&quot;https://$registry_url&quot;, &quot;ecr:us-east-1:aws&quot;) {
            docker.image(&quot;$registry_url/$sonarscan&quot;).push()
            }
        }
    }
}
}
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>